package de.randombyte.lighthub.midi.akai

object SysEx {
    private val SYSEX_START = ubyteArrayOf(0xF0u, 0x47u, 0x0u, 0x78u)
    private const val SYSEX_END = 0xF7.toByte()

    private val SIGNAL_VALID_STATUS = ubyteArrayOf(0x40u, 0x41u, 0x43u)

    val SYSEX_SPECIAL_MODE = ubyteArrayOf(0xF0u, 0x47u, 0x00u, 0x78u, 0x30u, 0x00u, 0x04u, 0x01u, 0x00u, 0x00u, 0x38u, 0xF7u)

    val MAPPING_START = listOf(0xF0, 0x47, 0x00, 0x78, 0x10, 0x04, 0x59, 0x00).map { it.toByte() }.toByteArray()

    val MAPPING_END = listOf(
        0x20, 0x78, 0x01, 0x04, 0x01, 0x32, 0x3A, 0x02, 0x03, 0x00, 0x24, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x25, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x26, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x27, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x28, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x2A, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x2B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x2C, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x2D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x2E, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x2F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x31, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x32, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x33, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x31, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x32, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x33, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x34, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x36, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x37, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x39, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3A, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x3B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3C, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x3D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3E, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x3F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3C, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x3D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x3E, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x3F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x41, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x42, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x43, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x46, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x47, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x48, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x49, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x4A, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x4B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x48, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x49, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x4A, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x4B, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x4D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x4E, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x4F, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x51, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x52, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x53, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x54, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x55, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x56, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x57, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x7F, 0x7F, 0x7F, 0x00,
        0x00, 0x09, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x0E, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x0F,
        0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x10, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x11, 0x00, 0x7F,
        0x7F, 0x7F, 0x00, 0x00, 0x14, 0x00, 0x7F, 0x00, 0x00, 0x15, 0x00, 0x7F, 0x00, 0x00, 0x16, 0x00,
        0x7F, 0x00, 0x00, 0x17, 0x00, 0x7F, 0x00, 0x00, 0x18, 0x00, 0x7F, 0x00, 0x00, 0x19, 0x00, 0x7F,
        0xF7
    ).map { it.toByte() }.toByteArray()

    const val MAPPING_NAME_LENGTH = 8

    val MAPPING_LENGTH = MAPPING_START.size + MAPPING_NAME_LENGTH + MAPPING_END.size

    fun createMappingWithName(name: String) =
        MAPPING_START + (name + " ".repeat(MAPPING_NAME_LENGTH)).take(8).toByteArray() + MAPPING_END

    data class Signal constructor(val type: Int, val control: Int, val value: Int)

    fun parseSysEx(rawData: ByteArray): Signal? {
        if (rawData.size != 10) return null
        val uData = rawData.toUByteArray()
        if (!uData.containsAtFront(SYSEX_START) || rawData.last() != SYSEX_END) return null

        if (uData[4] !in SIGNAL_VALID_STATUS) {
            println("Invalid type: ${uData[4]}")
            return null
        }

        return Signal(uData[4].toInt(), uData[7].toInt(), uData[8].toInt())
    }

    private fun UByteArray.containsAtFront(data: UByteArray): Boolean {
        if (this.size < data.size) return false
        data.forEachIndexed { index, value ->
            if (get(index) != value) return false
        }
        return true
    }
}